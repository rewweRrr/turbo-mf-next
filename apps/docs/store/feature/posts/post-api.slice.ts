// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { PostModel } from "./post.model";
import { POSTS_URL } from "../../../constants/api.constants";

// Define a service using a base URL and expected endpoints
export const postsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: POSTS_URL }),
  reducerPath: "postsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Posts"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `PostModel`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getPosts: build.query<PostModel[], number>({
      query: (limit = 10) => `?limit=${limit}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Posts", id }],
    }),
    // createPosts: build.query<PostModel, Partial<PostModel>>({
    //   query: (limit = 10) => `?limit=${limit}`,
    //   // `providesTags` determines which 'tag' is attached to the
    //   // cached data returned by the query.
    //   providesTags: (result, error, id) => [{ type: "Posts", id }],
    // }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `postsApiSlice.endpoints.getPosts.useQuery`
export const useGetPostsQuery: typeof postsApiSlice.useGetPostsQuery =
  postsApiSlice.useGetPostsQuery;
